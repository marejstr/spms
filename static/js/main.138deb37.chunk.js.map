{"version":3,"sources":["contexts/HistoricalStockValuesContext.js","reducers/portfolioReducer.js","contexts/PortfolioContext.js","components/Header.js","components/ModalGraph.js","components/NewPortfolioForm.js","components/Portfolio.js","components/PortfolioGrid.js","components/App.js","serviceWorker.js","index.js"],"names":["HistoricalStockValuesContext","createContext","HistoricalStockValuesContextProvider","props","useState","localStorageData","localStorage","getItem","JSON","parse","historicalValues","setHistoricalValues","useEffect","setItem","stringify","updateStockHistory","symbols","a","previousValues","changed","symbol","stock","find","isSameDay","Date","updateDate","console","log","updateHistoricalValues","updateAndAdd","b","getFullYear","getMonth","getDate","histValues","url","fetch","res","json","histJson","getDataFromSymbol","undefined","jsonData","hasOwnProperty","openValues","map","item","date","value","uOpen","stocks","filter","Provider","children","portfolioReducer","state","action","type","id","uuid","name","currency","portfolio","newStockArray","concat","toUpperCase","initialValue","latestValue","latest","quantity","index","findIndex","slice","Object","assign","stockIds","forEach","pIndex","ind","portfolioToEditIndex","PortfolioContext","PortfolioContextProvider","useReducer","localStoragePortfolios","portfolios","dispatch","updateStocks","Promise","all","getCurrentPrice","addStock","histDate","replace","getHistoricalPrice","historicalPrice","price","priceJson","latestPrice","Header","className","ModalGraph","useContext","showHideClassName","setShowHideClassName","startDate","setStartDate","endDate","setEndDate","dates","setDates","graphData","setGraphData","end","start","setDate","toISOString","substring","show","data","stockToEdit","s","push","length","incDate","stopDate","newElement","dateString","symb","stockDate","histValue","parseFloat","COLORS","width","height","key","connectNulls","dataKey","dot","stroke","onSubmit","e","preventDefault","placeholder","onChange","target","required","onClick","handleClose","NewPortfolioForm","portfolioName","setPortfolioName","Portfolio","showModal","stockSymbol","setStockSymbol","setStockDate","stockQuantity","setStockQuantity","stockErrorMessage","setStockErrorMessage","selectValue","setSelectValue","selectedRows","setSelectedRows","handleAddStock","message","handleChange","updateStockErrorMessage","errorMessage","isNaN","test","exchange","floatValue","Math","round","symbolArray","includes","indexOf","i","handleRowClick","sum","calculateTotalValue","title","disabled","PortfolioGrid","App","modalState","setModalState","modalSymbols","setModalSymbols","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.138deb37.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nexport const HistoricalStockValuesContext = createContext();\n\n// Stateless function component that provides a context to consumers\nconst HistoricalStockValuesContextProvider = props => {\n  const initialData = () => {\n    let localStorageData = localStorage.getItem(\"historicalValues\");\n    return localStorageData ? JSON.parse(localStorageData) : [];\n  };\n\n  // The state of the context is provided using the state hook\n  const [historicalValues, setHistoricalValues] = useState(initialData);\n\n  // Structure of data\n  /*\n    {\n        symbol: msft,\n        updateDate: '2019-11-23',\n        historicalValues: [\n            {\n                date: '2018-06-12',\n                value: 20\n            },\n            ...\n        ]\n    }\n    */\n\n  // Effect hook that runs every time the historicalValues data changes\n  useEffect(() => {\n    localStorage.setItem(\"historicalValues\", JSON.stringify(historicalValues));\n  }, [historicalValues]);\n\n  // Main function for updating historical values\n  const updateStockHistory = async symbols => {\n    // Copy state array\n    // Update data for every stock in stocks\n    // Save all updates back to state at the same time\n    // Only one save to state to prevent re-renders of graph for every stock\n    let previousValues = [...historicalValues];\n    let changed = false;\n\n    for (let symbol of symbols) {\n      const stock = historicalValues.find(stock => stock.symbol === symbol);\n\n      if (stock) {\n        if (isSameDay(new Date(stock.updateDate), new Date())) {\n          // Stock has been updated today\n          console.log(\"No need to update stock\");\n        } else {\n          // Stock is present in state but needs to be updated\n          console.log(\"Updating historical values and replacing old\");\n          previousValues = await updateHistoricalValues(symbol, previousValues);\n          changed = true;\n        }\n      } else {\n        // Stock does not exist in state\n        console.log(\"Adding historical values for new stock\");\n        previousValues = await updateAndAdd(symbol, previousValues);\n        changed = true;\n      }\n    }\n    if (changed) {\n      setHistoricalValues([...previousValues]);\n    }\n  };\n\n  const isSameDay = (a, b) => {\n    return (\n      a.getFullYear() === b.getFullYear() &&\n      a.getMonth() === b.getMonth() &&\n      a.getDate() === b.getDate()\n    );\n  };\n\n  // function for fetching new historical values from iexapis\n  const histValues = async symbol => {\n    try {\n      const url =\n        \"https://sandbox.iexapis.com/stable/stock/\" +\n        symbol +\n        \"/chart/5y?token=Tpk_ba7aef68a8924148a189e53d3b72666e\";\n\n      const res = await fetch(url);\n      const histJson = await res.json();\n      return histJson;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // common function for update functions\n  const getDataFromSymbol = async symbol => {\n    const jsonData = await histValues(symbol);\n\n    if (jsonData !== undefined) {\n      let openValues;\n      if (jsonData[0].hasOwnProperty(\"uOpen\")) {\n        openValues = jsonData.map(item => ({\n          date: item.date,\n          value: item.uOpen\n        }));\n      } else {\n        console.log(\"Invalid response\");\n      }\n\n      return openValues;\n    }\n    return null;\n  };\n\n  const updateAndAdd = async (symbol, previousValues) => {\n    let openValues = await getDataFromSymbol(symbol);\n\n    // return state with added stock\n    return [\n      ...previousValues,\n      {\n        symbol: symbol,\n        updateDate: new Date(),\n        historicalValues: openValues\n      }\n    ];\n  };\n\n  const updateHistoricalValues = async (symbol, previousValues) => {\n    let openValues = await getDataFromSymbol(symbol);\n\n    // remove stock with out of date data from state\n    const stocks = previousValues.filter(stock => stock.symbol !== symbol);\n\n    // return state with updated data for the removed stock\n    return [\n      ...stocks,\n      {\n        symbol: symbol,\n        updateDate: new Date(),\n        historicalValues: openValues\n      }\n    ];\n  };\n\n  return (\n    <HistoricalStockValuesContext.Provider\n      value={{ historicalValues, updateStockHistory }}\n    >\n      {props.children}\n    </HistoricalStockValuesContext.Provider>\n  );\n};\n\nexport default HistoricalStockValuesContextProvider;\n","import uuid from \"uuid/v1\";\n\n// Reducer for PortfolioContext\nexport const portfolioReducer = (state, action) => {\n  switch (action.type) {\n    // Add a new portfolio object to the state\n    // The old state is expanded with ...state and a new portfolio is added to the end\n    // A random unique id for the portfolio is created with the uuid library\n    case \"ADD_PORTFOLIO\":\n      return [\n        ...state,\n        {\n          id: uuid(),\n          name: action.name,\n          currency: \"EUR\",\n          stocks: []\n        }\n      ];\n    // Remove a portfolio object from the state\n    // Filter out the object that matches the passed in id and return the result\n    case \"REMOVE_PORTFOLIO\":\n      return state.filter(portfolio => portfolio.id !== action.id);\n    case \"ADD_STOCK\":\n      // Add a new stock to defined portfolio\n      const portfolioToEdit = state.find(\n        portfolio => portfolio.id === action.id\n      );\n\n      const newStockArray = portfolioToEdit.stocks.concat([\n        {\n          id: uuid(),\n          symbol: action.symbol.toUpperCase(),\n          initialValue: action.value,\n          latestValue: action.latest,\n          quantity: action.quantity\n        }\n      ]);\n\n      const index = state.findIndex(portfolio => portfolio.id === action.id);\n\n      if (index === -1) {\n        console.log(\"Could not find portfolio with correct id\");\n        return state;\n      } else {\n        return [\n          ...state.slice(0, index),\n          Object.assign({}, state[index], { stocks: newStockArray }),\n          ...state.slice(index + 1)\n        ];\n      }\n    case \"REMOVE_STOCKS\":\n      // Remove selected stocks from a defined portfolio\n      const portfolio = state.find(portfolio => portfolio.id === action.id);\n\n      let stocks = portfolio.stocks;\n      action.stockIds.forEach(id => {\n        stocks = stocks.filter(stock => stock.id !== id);\n      });\n\n      const pIndex = state.findIndex(portfolio => portfolio.id === action.id);\n      if (pIndex === -1) {\n        console.log(\"Could not find portfolio with correct id\");\n        return state;\n      } else {\n        return [\n          ...state.slice(0, pIndex),\n          Object.assign({}, state[pIndex], { stocks: stocks }),\n          ...state.slice(pIndex + 1)\n        ];\n      }\n    case \"UPDATE_STOCKS\":\n      const ind = state.findIndex(portfolio => portfolio.id === action.id);\n      if (ind === -1) {\n        console.log(\"Could not find portfolio with correct id\");\n        return state;\n      } else {\n        return [\n          ...state.slice(0, ind),\n          Object.assign({}, state[ind], { stocks: action.stocks }),\n          ...state.slice(ind + 1)\n        ];\n      }\n\n    case \"CHANGE_CURRENCY\":\n      // Change currency state for a defined portfolio\n      const portfolioToEditIndex = state.findIndex(\n        portfolio => portfolio.id === action.id\n      );\n      if (portfolioToEditIndex === -1) {\n        console.log(\"Could not find portfolio with correct id\");\n        return state;\n      } else {\n        return [\n          ...state.slice(0, portfolioToEditIndex),\n          Object.assign({}, state[portfolioToEditIndex], {\n            currency: action.currency\n          }),\n          ...state.slice(portfolioToEditIndex + 1)\n        ];\n      }\n\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport { portfolioReducer } from \"../reducers/portfolioReducer\";\n\nexport const PortfolioContext = createContext();\n\n// Stateless function component that provides a context to consumers\nconst PortfolioContextProvider = props => {\n  // The state is an array of portfolio objects that each contains an array with stocks\n\n  // Uses a reducer to perform changes in the state\n  // Initial data is loaded from local storage\n  const [portfolios, dispatch] = useReducer(portfolioReducer, [], () => {\n    const localStoragePortfolios = localStorage.getItem(\"portfolios\");\n    return localStoragePortfolios ? JSON.parse(localStoragePortfolios) : [];\n  });\n\n  // Effect hook that runs every time the portfolios data changes\n  // Saves state to local storage\n  useEffect(() => {\n    localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n  }, [portfolios]);\n\n  // Updates stocks in a portfolio with current value\n  // Reducer can't have async function.\n  // Handle async part here and use reducer to add data to state\n  const updateStocks = async id => {\n    const portfolio = portfolios.find(portfolio => portfolio.id === id);\n\n    // wait for every promise\n    let stocks = await Promise.all(\n      portfolio.stocks.map(async stock => {\n        stock.latestValue = await getCurrentPrice(stock.symbol);\n        return stock;\n      })\n    );\n\n    dispatch({ type: \"UPDATE_STOCKS\", id: id, stocks: stocks });\n  };\n\n  // Add a new stock to defined portfolio\n  // Reducer can't have async function.\n  // Handle async part here and use reducer to add data to state\n  const addStock = async (id, symbol, date, quantity) => {\n    var histDate = date.replace(/-/g, \"\");\n\n    const latest = await getCurrentPrice(symbol);\n    const historicalPrice = await getHistoricalPrice(symbol, histDate);\n\n    if (historicalPrice !== null && historicalPrice[0] !== undefined) {\n      if (historicalPrice[0].hasOwnProperty(\"uClose\")) {\n        const price = historicalPrice[0][\"uClose\"];\n        dispatch({\n          type: \"ADD_STOCK\",\n          id: id,\n          symbol: symbol,\n          value: price,\n          latest: latest,\n          quantity: quantity\n        });\n        return \"\";\n      } else {\n        // return error message\n        return \"Could not find price for the stock\";\n      }\n    } else {\n      // return error message\n      return \"No data for stock\";\n    }\n  };\n\n  // function for fetching new historical values from iexapis\n  const getHistoricalPrice = async (symbol, date) => {\n    try {\n      const url =\n        \"https://sandbox.iexapis.com/stable/stock/\" +\n        symbol +\n        \"/chart/date/\" +\n        date +\n        \"?chartByDay=true&token=Tpk_ba7aef68a8924148a189e53d3b72666e\";\n      const res = await fetch(url);\n      const priceJson = await res.json();\n      return priceJson;\n    } catch (e) {\n      console.log(e);\n      return null;\n    }\n  };\n\n  const getCurrentPrice = async symbol => {\n    try {\n      const url =\n        \"https://sandbox.iexapis.com/stable/stock/\" +\n        symbol +\n        \"/quote/latestPrice?token=Tpk_ba7aef68a8924148a189e53d3b72666e\";\n\n      const res = await fetch(url);\n      const priceJson = await res.json();\n      let latestPrice = priceJson;\n\n      return latestPrice;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Return the portfolio provider for the child components to consume\n  // The available state and functions the child components can consume is defined in the value property\n  return (\n    <PortfolioContext.Provider\n      value={{ portfolios, dispatch, updateStocks, addStock }}\n    >\n      {props.children}\n    </PortfolioContext.Provider>\n  );\n};\n\nexport default PortfolioContextProvider;\n","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"header-text\">SPMS</div>\n            A stock portfolio website\n        </div>\n    );\n}\n\nexport default Header;","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  XAxis,\n  YAxis\n} from \"recharts\";\nimport { HistoricalStockValuesContext } from \"../contexts/HistoricalStockValuesContext\";\nimport \"./ModalGraph.css\";\n\n// Shows graph of selected stocks in table\n// Historical data for stocks is stored in HistoricalStockValuesContext\n// Data and UI updates are performed using effect hooks\nconst ModalGraph = props => {\n  // symbols is an array of stock symbols as strings\n  // show is an boolean value\n  const { historicalValues, updateStockHistory } = useContext(\n    HistoricalStockValuesContext\n  );\n  const [showHideClassName, setShowHideClassName] = useState(\n    \"modal display-none\"\n  );\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [dates, setDates] = useState();\n  const [graphData, setGraphData] = useState([]);\n\n  // Set date range when component mounts\n  // While component is mounted the date range stays as the last one the user defined\n  // Initial date range is the previous 30 days\n  useEffect(() => {\n    let end = new Date();\n    let start = new Date();\n    start.setDate(end.getDate() - 30);\n\n    // Set date values in input from initial state\n    setStartDate(start.toISOString().substring(0, 10));\n    setEndDate(end.toISOString().substring(0, 10));\n\n    setDates({\n      start: start.toISOString().substring(0, 10),\n      end: end.toISOString().substring(0, 10)\n    });\n  }, []);\n\n  // Hides and shows graph based on show prop\n  // Updates historical stock values in context\n  useEffect(() => {\n    if (props.show) {\n      setShowHideClassName(\"modal display-block\");\n\n      updateStockHistory(props.symbols);\n    } else {\n      setShowHideClassName(\"modal display-none\");\n    }\n  }, [props, updateStockHistory]);\n\n  //Update graph lines when historical data or date range changes\n  useEffect(() => {\n    if (props.symbols[0]) {\n      let stocks = [];\n      let data = [];\n\n      // Get stock states from context\n      for (let symbol of props.symbols) {\n        const stockToEdit = historicalValues.find(s => s.symbol === symbol);\n        if (typeof stockToEdit !== \"undefined\") {\n          stocks.push(stockToEdit);\n        }\n      }\n\n      if (stocks.length === props.symbols.length) {\n        let incDate = new Date(dates.start);\n        const stopDate = new Date(dates.end);\n\n        // Build graph data from stock states.\n        // Graph data consists of an array of objects\n        // An object has a date and a value for every stock, using symbol as key\n        while (incDate <= stopDate) {\n          let newElement = {};\n          const dateString = incDate.toISOString().substring(0, 10);\n          newElement[\"date\"] = dateString;\n\n          for (let stock of stocks) {\n            let symb = stock.symbol;\n            let stockDate = stock.historicalValues.find(\n              histValue => histValue.date === dateString\n            );\n            if (stockDate) {\n              newElement[symb] = parseFloat(stockDate.value);\n            }\n          }\n          data.push(newElement);\n\n          incDate.setDate(incDate.getDate() + 1);\n        }\n\n        setGraphData(data);\n      }\n    }\n  }, [historicalValues, dates, props]);\n\n  // set new date state from input\n  const handleUpdateDates = e => {\n    e.preventDefault();\n    setDates({ start: startDate, end: endDate });\n  };\n\n  const handleClose = e => {\n    props.handleClose();\n  };\n\n  // Colors for graph lines\n  const COLORS = [\n    \"#8ec07c\",\n    \"#fb4934\",\n    \"#fabd2f\",\n    \"#b8bb26\",\n    \"#d3869b\",\n    \"#83a598\",\n    \"#fe8019\"\n  ];\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        {props.symbols.length > 0 ? (\n          <div>\n            <ResponsiveContainer\n              className=\"line-chart\"\n              width=\"95%\"\n              height={500}\n            >\n              <LineChart data={graphData}>\n                {props.symbols.map((symbol, index) => {\n                  return (\n                    <Line\n                      key={symbol}\n                      connectNulls={true}\n                      type=\"monotone\"\n                      dataKey={symbol}\n                      dot={false}\n                      stroke={COLORS[index]}\n                    />\n                  );\n                })}\n\n                <Legend />\n                <CartesianGrid stroke=\"#eee5ce\" />\n                <XAxis dataKey=\"date\" stroke=\"#eee5ce\" />\n                <YAxis stroke=\"#eee5ce\" />\n              </LineChart>\n            </ResponsiveContainer>\n\n            <hr></hr>\n\n            <form id=\"date-form\" onSubmit={handleUpdateDates}>\n              <div className=\"inline-block\">\n                <label>Start date:</label>\n                <br></br>\n                <input\n                  type=\"text\"\n                  placeholder=\"yyyy-mm-dd\"\n                  value={startDate}\n                  onChange={e => setStartDate(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"inline-block\">\n                <label>End date:</label>\n                <br></br>\n                <input\n                  type=\"text\"\n                  placeholder=\"yyyy-mm-dd\"\n                  value={endDate}\n                  onChange={e => setEndDate(e.target.value)}\n                  required\n                />\n              </div>\n              <input type=\"submit\" value=\"Update\" />\n            </form>\n\n            <hr></hr>\n          </div>\n        ) : (\n          <h2> Please select the stocks to show from the portfolio table </h2>\n        )}\n\n        <button id=\"close-button\" onClick={handleClose}>\n          Close\n        </button>\n      </section>\n    </div>\n  );\n};\n\nexport default ModalGraph;\n","import React, { useContext, useState } from \"react\";\nimport { PortfolioContext } from \"../contexts/PortfolioContext\";\nimport \"./NewPortfolioForm.css\";\n\n// Form in header for adding a new portfolio\nconst NewPortfolioForm = () => {\n  const { dispatch } = useContext(PortfolioContext);\n  const [portfolioName, setPortfolioName] = useState(\"\");\n\n  const handleAddPortfolio = e => {\n    e.preventDefault();\n    dispatch({ type: \"ADD_PORTFOLIO\", name: portfolioName });\n    setPortfolioName(\"\");\n  };\n\n  return (\n    <form className=\"portfolio-form\" onSubmit={handleAddPortfolio}>\n      <input\n        type=\"text\"\n        placeholder=\"Portfolio name\"\n        value={portfolioName}\n        onChange={e => setPortfolioName(e.target.value)}\n        required\n      />\n      <input type=\"submit\" value=\"Add portfolio\" />\n    </form>\n  );\n};\n\nexport default NewPortfolioForm;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { PortfolioContext } from \"../contexts/PortfolioContext\";\nimport \"./Portfolio.css\";\n\nconst Portfolio = props => {\n  // portfolio is the state of this portfolio\n  // show modal is a passed down function\n  const { portfolio, showModal } = props;\n\n  const { dispatch, updateStocks, addStock } = useContext(PortfolioContext);\n  const [stockSymbol, setStockSymbol] = useState(\"\");\n  const [stockDate, setStockDate] = useState(\"\");\n  const [stockQuantity, setStockQuantity] = useState(\"\");\n  const [stockErrorMessage, setStockErrorMessage] = useState(\"\");\n  const [selectValue, setSelectValue] = useState();\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  // Set state of currency dropdown when state of portfolio prop changes\n  // Used for setting dropdown value on re-render\n  useEffect(() => {\n    setSelectValue(portfolio.currency);\n  }, [portfolio]);\n\n  // Saves a new stock to the correct portfolio in PortfolioContext and clears input fields\n  const handleAddStock = async e => {\n    e.preventDefault();\n    setStockErrorMessage(\"Loading data...\");\n\n    const message = await addStock(\n      portfolio.id,\n      stockSymbol,\n      stockDate,\n      stockQuantity\n    );\n\n    // Add stock button will be disabled if there is a message.\n    // Can't perform the exact same search but if it failed you probably need to make changes\n    setStockErrorMessage(message);\n    if (message === \"\") {\n      setStockSymbol(\"\");\n      setStockDate(\"\");\n      setStockQuantity(\"\");\n    }\n  };\n\n  // Handles changes in the input fields for a new stock.\n  // Updates the error message if inputs are not valid\n  const handleChange = e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"symbol\":\n        setStockSymbol(value);\n        updateStockErrorMessage(value, stockDate, stockQuantity);\n        break;\n      case \"date\":\n        setStockDate(value);\n        updateStockErrorMessage(stockSymbol, value, stockQuantity);\n        break;\n      case \"quantity\":\n        setStockQuantity(value);\n        updateStockErrorMessage(stockSymbol, stockDate, value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Updates the error message for stock input fields based on current values\n  const updateStockErrorMessage = (symbol, date, quantity) => {\n    let errorMessage = \"\";\n\n    if (symbol.length > 0 && symbol.length > 5) {\n      errorMessage = \"Symbol has to be under 6 characters long\";\n    } else if (\n      Date.parse(new Date(date) === \"Invalid Date\") ||\n      isNaN(new Date(date)) ||\n      !/(\\d{4})-(\\d{2})-(\\d{2})/.test(date)\n    ) {\n      errorMessage = \"Please enter past date in format: yyyy-mm-dd\";\n    } else if (quantity.length > 0 && !/^\\+?[1-9][\\d]*$/.test(quantity)) {\n      errorMessage = \"Number of shares has to be a positive whole number\";\n    }\n    setStockErrorMessage(errorMessage);\n  };\n\n  // Handles clicks on table rows\n  const handleRowClick = stock => {\n    if (selectedRows.indexOf(stock.id) >= 0) {\n      // The stock id is found in selectedRows state array\n      // Filter out the id and add remaining back to selectedRows\n      setSelectedRows(selectedRows.filter(i => i !== stock.id));\n    } else {\n      // Add the stock id to selectedRows\n      setSelectedRows(selectedRows.concat(stock.id));\n    }\n  };\n\n  // Handles conversion from dollar to euro\n  // All values saved in state is saved as dollar\n  const exchange = value => {\n    let floatValue = parseFloat(value);\n    if (portfolio.currency === \"EUR\") {\n      return Math.round((floatValue / 1.11) * 100) / 100;\n    }\n    return Math.round(floatValue * 100) / 100;\n  };\n\n  // Calculates total value for all stocks in table\n  const calculateTotalValue = () => {\n    let sum = 0;\n    portfolio.stocks.forEach(stock => {\n      sum = sum + stock.latestValue * stock.quantity;\n    });\n    return sum;\n  };\n\n  // Removes stocks from the correct portfolio in PortfolioContext and clears selected rows\n  const removeStocks = e => {\n    dispatch({\n      type: \"REMOVE_STOCKS\",\n      id: portfolio.id,\n      stockIds: selectedRows\n    });\n    setSelectedRows([]);\n  };\n\n  // Creates array of stock symbols that are selected in the table and returns to parent via props\n  const showGraph = e => {\n    let symbolArray = [];\n    portfolio.stocks.forEach(stock => {\n      if (selectedRows.includes(stock.id)) {\n        symbolArray.push(stock.symbol);\n      }\n    });\n    showModal(symbolArray);\n  };\n\n  // Saves currency to the correct portfolio in PortfolioContext\n  const selectChanged = e => {\n    setSelectValue(e.target.value);\n    dispatch({\n      type: \"CHANGE_CURRENCY\",\n      id: portfolio.id,\n      currency: e.target.value\n    });\n  };\n\n  return (\n    <div className=\"Portfolio\">\n      <div className=\"portfolio-header\">\n        <h1>{portfolio.name}</h1>\n\n        <button\n          id=\"delete-portfolio\"\n          onClick={() =>\n            dispatch({ type: \"REMOVE_PORTFOLIO\", id: portfolio.id })\n          }\n        >\n          Delete\n        </button>\n\n        <button id=\"first-button\" onClick={() => updateStocks(portfolio.id)}>\n          Refresh\n        </button>\n\n        <button onClick={removeStocks}>Delete selected</button>\n\n        <button onClick={showGraph}>Graph selected</button>\n\n        <select value={selectValue} onChange={selectChanged}>\n          <option value=\"EUR\">EUR</option>\n          <option value=\"USD\">USD</option>\n        </select>\n      </div>\n\n      <div className=\"portfolio-body\">\n        <table className=\"table-scroll\">\n          <thead>\n            <tr>\n              <th>✓</th>\n              <th>Symbol</th>\n              <th>Purchase value</th>\n              <th>Current value</th>\n              <th>Quantity</th>\n              <th>Total value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {portfolio.stocks.map(stock => (\n              <tr\n                className={\n                  selectedRows.includes(stock.id) ? \"selected\" : \"not-selected\"\n                }\n                key={stock.id}\n                onClick={() => handleRowClick(stock)}\n              >\n                <td>{selectedRows.includes(stock.id) ? \"✓\" : \"\"}</td>\n                <td>{stock.symbol}</td>\n                <td>{exchange(stock.initialValue)}</td>\n                <td>{exchange(stock.latestValue)}</td>\n                <td>{stock.quantity}</td>\n                <td>{exchange(stock.latestValue * stock.quantity)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        Total portfolio value: {exchange(calculateTotalValue())}{\" \"}\n        {portfolio.currency}\n        <div id=\"error-label\">\n          <label>{stockErrorMessage}</label>\n        </div>\n        <form onSubmit={handleAddStock}>\n          <input\n            type=\"text\"\n            name=\"symbol\"\n            placeholder=\"Symbol\"\n            title=\"Symbol for stock. For example: AAPL\"\n            value={stockSymbol}\n            onChange={handleChange}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"date\"\n            placeholder=\"Date of purchase\"\n            title=\"Date of purchase in format: yyyy-mm-dd\"\n            value={stockDate}\n            onChange={handleChange}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"quantity\"\n            placeholder=\"Number of shares\"\n            title=\"The number of stocks to be added\"\n            value={stockQuantity}\n            onChange={handleChange}\n            required\n          />\n          <input disabled={stockErrorMessage} type=\"submit\" value=\"Add stock\" />\n          <br />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Portfolio;\n","import React, { useContext } from \"react\";\nimport { PortfolioContext } from \"../contexts/PortfolioContext\";\nimport Portfolio from \"./Portfolio\";\nimport \"./PortfolioGrid.css\";\n\n// Renders a grid of portfolios if there are any in PortfolioContext state.\n// Otherwise renders a text line\nconst PortfolioGrid = props => {\n  const { portfolios } = useContext(PortfolioContext);\n\n  return portfolios.length ? (\n    <div className=\"portfolio-grid\">\n      {portfolios.map(portfolio => {\n        return (\n          <Portfolio\n            key={portfolio.id}\n            portfolio={portfolio}\n            showModal={props.showModal}\n          ></Portfolio>\n        );\n      })}\n    </div>\n  ) : (\n    <h2>No portfolios to show</h2>\n  );\n};\n\nexport default PortfolioGrid;\n","import React, { useState } from \"react\";\nimport HistoricalStockValuesContextProvider from \"../contexts/HistoricalStockValuesContext\";\nimport PortfolioContextProvider from \"../contexts/PortfolioContext\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport ModalGraph from \"./ModalGraph\";\nimport NewPortfolioForm from \"./NewPortfolioForm\";\nimport PortfolioGrid from \"./PortfolioGrid\";\n\n/*\n    App uses context providers to handle all the state that should be saved to local storage.\n    HistoricalStockValuesContext handles graph historical data for all stocks that have been shown.\n    PortfolioContext handles data about portfolios and stocks in those portfolios\n*/\n\nfunction App() {\n  // State that determines if the graph window should be visible\n  const [modalState, setModalState] = useState(false);\n  // Stock symbols that are shown on the graph\n  const [modalSymbols, setModalSymbols] = useState([]);\n\n  // Shows the graph window. Symbol array is an array of string symbols to be shown\n  const showModal = symbolArray => {\n    setModalState(true);\n    setModalSymbols(symbolArray);\n  };\n\n  return (\n    <div className=\"App\">\n      <PortfolioContextProvider>\n        <div className=\"top\">\n          <Header />\n          <NewPortfolioForm />\n        </div>\n        <PortfolioGrid showModal={showModal} />\n      </PortfolioContextProvider>\n      <HistoricalStockValuesContextProvider>\n        <ModalGraph\n          show={modalState}\n          symbols={modalSymbols}\n          handleClose={() => setModalState(false)}\n        />\n      </HistoricalStockValuesContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}